openapi: 3.0.3
info:
  title: PulseGuard API
  description: |
    Comprehensive monitoring and management API for domains, devices, services, and network utilities.
    
    ## Authentication
    
    PulseGuard API uses different authentication methods depending on the endpoint:
    
    - **Bearer Token**: Most API endpoints require a valid API token passed in the Authorization header
    - **Agent Authentication**: Device agent endpoints use device-specific tokens
    - **Public Access**: Some endpoints like domain checking and downloads are publicly accessible
    
    ## Rate Limiting
    
    API requests are rate-limited per user and endpoint. Rate limits vary by subscription plan.
    
    ## Plan Requirements
    
    Certain API endpoints require specific subscription plans:
    - **Expert Plan**: Full API v1 access with advanced features
    - **Reports Plan**: Access to comprehensive reporting data
    - **Free/Pro Plans**: Basic monitoring with limited API access
    
    ## Base URL
    
    **Production**: `https://app.pulseguard.nl/api`
    
    ## Support
    
    For API support, visit our [documentation](https://docs.pulseguard.nl) or contact us at info@pulseguard.nl.
  version: 1.0.0
  contact:
    name: PulseGuard Support
    url: https://docs.pulseguard.nl
    email: info@pulseguard.nl
  license:
    name: Proprietary
    url: https://pulseguard.nl/terms

servers:
  - url: https://app.pulseguard.nl/api
    description: Production server

security:
  - bearerAuth: []
  - agentAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: token
      description: API token generated from your PulseGuard dashboard
    agentAuth:
      type: http
      scheme: bearer
      bearerFormat: token
      description: Device agent authentication token
  
  schemas:
    Domain:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: Unique identifier for the domain
        name:
          type: string
          description: Domain name (e.g., example.com)
        url:
          type: string
          format: uri
          description: Full URL to monitor
        status:
          type: string
          enum: [up, down, maintenance, unknown]
          description: Current domain status
        response_time:
          type: number
          format: float
          description: Latest response time in milliseconds
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required: [uuid, name, url, status]

    Device:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: Unique identifier for the device
        name:
          type: string
          description: Device name
        hostname:
          type: string
          description: Device hostname
        os:
          type: string
          description: Operating system
        status:
          type: string
          enum: [online, offline, maintenance, unknown]
          description: Current device status
        last_seen:
          type: string
          format: date-time
          description: Last time device checked in
        metrics:
          type: object
          properties:
            cpu_usage:
              type: number
              format: float
              description: CPU usage percentage
            memory_usage:
              type: number
              format: float
              description: Memory usage percentage
            disk_usage:
              type: number
              format: float
              description: Disk usage percentage
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required: [uuid, name, hostname, status]

    ServiceMonitor:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: Unique identifier for the service monitor
        name:
          type: string
          description: Service monitor name
        type:
          type: string
          enum: [http, tcp, ping, dns]
          description: Type of monitoring
        url:
          type: string
          format: uri
          description: URL or endpoint to monitor
        status:
          type: string
          enum: [up, down, maintenance, unknown]
          description: Current service status
        check_interval:
          type: integer
          description: Check interval in minutes
        timeout:
          type: integer
          description: Timeout in seconds
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required: [uuid, name, type, url, status]

    Anomaly:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the anomaly
        domain_id:
          type: integer
          description: Associated domain ID
        type:
          type: string
          enum: [response_time, uptime, security, ssl]
          description: Type of anomaly detected
        severity:
          type: string
          enum: [low, medium, high, critical]
          description: Severity level
        title:
          type: string
          description: Anomaly title
        description:
          type: string
          description: Detailed description
        status:
          type: string
          enum: [open, resolved, false_positive]
          description: Current anomaly status
        detected_at:
          type: string
          format: date-time
        resolved_at:
          type: string
          format: date-time
          nullable: true
      required: [id, domain_id, type, severity, title, status]

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          description: Error message
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: Validation errors (if applicable)
      required: [success, message]

    Success:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          description: Success message
        data:
          oneOf:
            - type: object
              description: Response data as object
            - type: array  
              description: Response data as array
      required: [success, message]

  parameters:
    DomainUUID:
      in: path
      name: uuid
      required: true
      schema:
        type: string
        format: uuid
      description: Domain UUID

    DeviceUUID:
      in: path
      name: uuid
      required: true
      schema:
        type: string
        format: uuid
      description: Device UUID

    ServiceUUID:
      in: path
      name: uuid
      required: true
      schema:
        type: string
        format: uuid
      description: Service Monitor UUID

  responses:
    Unauthorized:
      description: Unauthorized - Invalid or missing API token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            message: "Unauthenticated."

    Forbidden:
      description: Forbidden - Insufficient permissions or plan requirements not met
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            message: "This feature requires an Expert Plan subscription."

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            message: "Resource not found."

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            message: "The given data was invalid."
            errors:
              name: ["The name field is required."]

paths:
  # User Authentication
  /user:
    get:
      tags: [Authentication]
      summary: Get authenticated user
      description: Returns information about the currently authenticated user
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: integer
                          name:
                            type: string
                          email:
                            type: string
                            format: email
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Domain Monitoring API
  /v2/domains:
    get:
      tags: [Domains]
      summary: List domains
      description: Retrieve a list of all domains for the authenticated user (Expert Plan required)
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: per_page
          schema:
            type: integer
            default: 15
            maximum: 100
          description: Number of items per page
      responses:
        '200':
          description: Domains retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Domain'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      tags: [Domains]
      summary: Create domain
      description: Create a new domain monitor (Expert Plan required)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Domain name
                  example: "example.com"
                url:
                  type: string
                  format: uri
                  description: Full URL to monitor
                  example: "https://example.com"
                check_interval:
                  type: integer
                  description: Check interval in minutes
                  default: 5
                  minimum: 1
                  maximum: 60
              required: [name, url]
      responses:
        '201':
          description: Domain created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Domain'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'

  /v2/domains/{uuid}:
    get:
      tags: [Domains]
      summary: Get domain
      description: Retrieve details of a specific domain (Expert Plan required)
      parameters:
        - $ref: '#/components/parameters/DomainUUID'
      responses:
        '200':
          description: Domain retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Domain'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Domains]
      summary: Update domain
      description: Update an existing domain (Expert Plan required)
      parameters:
        - $ref: '#/components/parameters/DomainUUID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Domain name
                url:
                  type: string
                  format: uri
                  description: URL to monitor
                check_interval:
                  type: integer
                  description: Check interval in minutes
                  minimum: 1
                  maximum: 60
      responses:
        '200':
          description: Domain updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Domain'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
    delete:
      tags: [Domains]
      summary: Delete domain
      description: Delete a domain monitor (Expert Plan required)
      parameters:
        - $ref: '#/components/parameters/DomainUUID'
      responses:
        '200':
          description: Domain deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      message:
                        example: "Domain deleted successfully"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Device Management API
  /v2/devices:
    get:
      tags: [Devices]
      summary: List devices
      description: Retrieve a list of all devices for the authenticated user (Expert Plan required)
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: per_page
          schema:
            type: integer
            default: 15
            maximum: 100
          description: Number of items per page
      responses:
        '200':
          description: Devices retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Device'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      tags: [Devices]
      summary: Create device
      description: Create a new device monitor (Expert Plan required)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Device name
                  example: "Web Server 01"
                hostname:
                  type: string
                  description: Device hostname or IP address
                  example: "server01.example.com"
                description:
                  type: string
                  description: Device description
                  example: "Production web server"
              required: [name, hostname]
      responses:
        '201':
          description: Device created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Device'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'

  /v2/devices/{uuid}:
    get:
      tags: [Devices]
      summary: Get device
      description: Retrieve details of a specific device (Expert Plan required)
      parameters:
        - $ref: '#/components/parameters/DeviceUUID'
      responses:
        '200':
          description: Device retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Device'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Devices]
      summary: Update device
      description: Update an existing device (Expert Plan required)
      parameters:
        - $ref: '#/components/parameters/DeviceUUID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Device name
                hostname:
                  type: string
                  description: Device hostname or IP address
                description:
                  type: string
                  description: Device description
      responses:
        '200':
          description: Device updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Device'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
    delete:
      tags: [Devices]
      summary: Delete device
      description: Delete a device monitor (Expert Plan required)
      parameters:
        - $ref: '#/components/parameters/DeviceUUID'
      responses:
        '200':
          description: Device deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      message:
                        example: "Device deleted successfully"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /v2/devices/{uuid}/regenerate-token:
    post:
      tags: [Devices]
      summary: Regenerate device token
      description: Generate a new authentication token for a device (Expert Plan required)
      parameters:
        - $ref: '#/components/parameters/DeviceUUID'
      responses:
        '200':
          description: Token regenerated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          token:
                            type: string
                            description: New device authentication token
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Service Monitoring API
  /v2/services:
    get:
      tags: [Service Monitors]
      summary: List service monitors
      description: Retrieve a list of all service monitors (Expert Plan required)
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: per_page
          schema:
            type: integer
            default: 15
            maximum: 100
          description: Number of items per page
      responses:
        '200':
          description: Service monitors retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/ServiceMonitor'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      tags: [Service Monitors]
      summary: Create service monitor
      description: Create a new service monitor (Expert Plan required)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Service monitor name
                  example: "API Health Check"
                type:
                  type: string
                  enum: [http, tcp, ping, dns]
                  description: Type of monitoring
                  example: "http"
                url:
                  type: string
                  format: uri
                  description: URL or endpoint to monitor
                  example: "https://api.example.com/health"
                check_interval:
                  type: integer
                  description: Check interval in minutes
                  default: 5
                  minimum: 1
                  maximum: 60
                timeout:
                  type: integer
                  description: Timeout in seconds
                  default: 30
                  minimum: 1
                  maximum: 300
              required: [name, type, url]
      responses:
        '201':
          description: Service monitor created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ServiceMonitor'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'

  /v2/services/{uuid}:
    get:
      tags: [Service Monitors]
      summary: Get service monitor
      description: Retrieve details of a specific service monitor (Expert Plan required)
      parameters:
        - $ref: '#/components/parameters/ServiceUUID'
      responses:
        '200':
          description: Service monitor retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ServiceMonitor'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Service Monitors]
      summary: Update service monitor
      description: Update an existing service monitor (Expert Plan required)
      parameters:
        - $ref: '#/components/parameters/ServiceUUID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Service monitor name
                type:
                  type: string
                  enum: [http, tcp, ping, dns]
                  description: Type of monitoring
                url:
                  type: string
                  format: uri
                  description: URL or endpoint to monitor
                check_interval:
                  type: integer
                  description: Check interval in minutes
                  minimum: 1
                  maximum: 60
                timeout:
                  type: integer
                  description: Timeout in seconds
                  minimum: 1
                  maximum: 300
      responses:
        '200':
          description: Service monitor updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ServiceMonitor'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
    delete:
      tags: [Service Monitors]
      summary: Delete service monitor
      description: Delete a service monitor (Expert Plan required)
      parameters:
        - $ref: '#/components/parameters/ServiceUUID'
      responses:
        '200':
          description: Service monitor deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      message:
                        example: "Service monitor deleted successfully"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /v2/services/{uuid}/check:
    post:
      tags: [Service Monitors]
      summary: Manual service check
      description: Trigger a manual check for a service monitor (Expert Plan required)
      parameters:
        - $ref: '#/components/parameters/ServiceUUID'
      responses:
        '200':
          description: Manual check initiated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          status:
                            type: string
                            enum: [up, down]
                          response_time:
                            type: number
                            format: float
                          checked_at:
                            type: string
                            format: date-time
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Toolbox API
  /v2/toolbox/dns-lookup:
    post:
      tags: [Toolbox]
      summary: DNS lookup
      description: Perform DNS record lookup (Expert Plan required)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                domain:
                  type: string
                  description: Domain name to lookup
                  example: "example.com"
                record_type:
                  type: string
                  enum: [A, AAAA, CNAME, MX, NS, TXT, SOA, PTR]
                  default: "A"
                  description: DNS record type
              required: [domain]
      responses:
        '200':
          description: DNS lookup completed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          domain:
                            type: string
                          record_type:
                            type: string
                          records:
                            type: array
                            items:
                              type: object
                              properties:
                                value:
                                  type: string
                                ttl:
                                  type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'

  /v2/toolbox/whois:
    post:
      tags: [Toolbox]
      summary: WHOIS lookup
      description: Perform WHOIS domain lookup (Expert Plan required)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                domain:
                  type: string
                  description: Domain name for WHOIS lookup
                  example: "example.com"
              required: [domain]
      responses:
        '200':
          description: WHOIS lookup completed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          domain:
                            type: string
                          registrar:
                            type: string
                          creation_date:
                            type: string
                            format: date-time
                          expiration_date:
                            type: string
                            format: date-time
                          nameservers:
                            type: array
                            items:
                              type: string
                          raw_data:
                            type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'

  /v2/toolbox/ssl-check:
    post:
      tags: [Toolbox]
      summary: SSL certificate check
      description: Check SSL certificate details (Expert Plan required)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                  description: URL to check SSL certificate
                  example: "https://example.com"
              required: [url]
      responses:
        '200':
          description: SSL check completed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          url:
                            type: string
                          valid:
                            type: boolean
                          issuer:
                            type: string
                          subject:
                            type: string
                          valid_from:
                            type: string
                            format: date-time
                          valid_to:
                            type: string
                            format: date-time
                          days_until_expiry:
                            type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'

  /v2/toolbox/port-scan:
    post:
      tags: [Toolbox]
      summary: Port scan
      description: Scan network ports on a target host (Expert Plan required)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                host:
                  type: string
                  description: Host to scan (IP address or hostname)
                  example: "example.com"
                ports:
                  type: string
                  description: Ports to scan (comma-separated or range)
                  example: "80,443,22-25"
              required: [host, ports]
      responses:
        '200':
          description: Port scan completed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          host:
                            type: string
                          scan_results:
                            type: array
                            items:
                              type: object
                              properties:
                                port:
                                  type: integer
                                status:
                                  type: string
                                  enum: [open, closed, filtered]
                                service:
                                  type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'

  /v2/toolbox/ip-location:
    post:
      tags: [Toolbox]
      summary: IP geolocation
      description: Get geographical information for an IP address (Expert Plan required)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ip:
                  type: string
                  description: IP address to lookup
                  example: "8.8.8.8"
              required: [ip]
      responses:
        '200':
          description: IP geolocation completed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          ip:
                            type: string
                          country:
                            type: string
                          city:
                            type: string
                          region:
                            type: string
                          isp:
                            type: string
                          latitude:
                            type: number
                            format: float
                          longitude:
                            type: number
                            format: float
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'

  /v2/toolbox/get-ip:
    get:
      tags: [Toolbox]
      summary: Get client IP
      description: Get the client's public IP address (Expert Plan required)
      responses:
        '200':
          description: Client IP retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          ip:
                            type: string
                            description: Client's public IP address
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  # Statistics API
  /v2/stats/domains/{uuid}/response-time/history:
    get:
      tags: [Statistics]
      summary: Get domain response time history
      description: Retrieve historical response time data for a domain (Expert Plan required)
      parameters:
        - $ref: '#/components/parameters/DomainUUID'
        - in: query
          name: period
          schema:
            type: string
            enum: [1h, 24h, 7d, 30d, 90d]
            default: "24h"
          description: Time period for historical data
        - in: query
          name: interval
          schema:
            type: string
            enum: [1m, 5m, 15m, 1h, 1d]
            default: "5m"
          description: Data point interval
      responses:
        '200':
          description: Response time history retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            timestamp:
                              type: string
                              format: date-time
                            response_time:
                              type: number
                              format: float
                            status:
                              type: string
                              enum: [up, down]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /v2/stats/domains/{uuid}/response-time/stats:
    get:
      tags: [Statistics]
      summary: Get domain response time statistics
      description: Get aggregated response time statistics for a domain (Expert Plan required)
      parameters:
        - $ref: '#/components/parameters/DomainUUID'
        - in: query
          name: period
          schema:
            type: string
            enum: [1h, 24h, 7d, 30d, 90d]
            default: "24h"
          description: Time period for statistics
      responses:
        '200':
          description: Response time statistics retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          average_response_time:
                            type: number
                            format: float
                          min_response_time:
                            type: number
                            format: float
                          max_response_time:
                            type: number
                            format: float
                          uptime_percentage:
                            type: number
                            format: float
                          total_checks:
                            type: integer
                          successful_checks:
                            type: integer
                          failed_checks:
                            type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # AI & Anomaly Detection
  /v2/domains/{domainId}/analyze-anomalies:
    post:
      tags: [AI & Anomalies]
      summary: Analyze domain anomalies
      description: Analyze a domain for potential anomalies using AI
      parameters:
        - in: path
          name: domainId
          required: true
          schema:
            type: integer
          description: Domain ID
      responses:
        '200':
          description: Anomaly analysis completed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          analysis_id:
                            type: string
                          status:
                            type: string
                            enum: [completed, in_progress, failed]
                          anomalies_found:
                            type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /v2/domains/{domainId}/anomalies:
    get:
      tags: [AI & Anomalies]
      summary: Get domain anomalies
      description: Retrieve anomalies detected for a specific domain
      parameters:
        - in: path
          name: domainId
          required: true
          schema:
            type: integer
          description: Domain ID
        - in: query
          name: status
          schema:
            type: string
            enum: [open, resolved, false_positive]
          description: Filter by anomaly status
        - in: query
          name: severity
          schema:
            type: string
            enum: [low, medium, high, critical]
          description: Filter by severity level
      responses:
        '200':
          description: Domain anomalies retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Anomaly'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /v2/anomalies/{anomalyId}/resolve:
    post:
      tags: [AI & Anomalies]
      summary: Resolve anomaly
      description: Mark an anomaly as resolved
      parameters:
        - in: path
          name: anomalyId
          required: true
          schema:
            type: integer
          description: Anomaly ID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resolution_note:
                  type: string
                  description: Optional note about the resolution
      responses:
        '200':
          description: Anomaly resolved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Anomaly'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /v2/anomalies/{anomalyId}/false-positive:
    post:
      tags: [AI & Anomalies]
      summary: Mark as false positive
      description: Mark an anomaly as a false positive
      parameters:
        - in: path
          name: anomalyId
          required: true
          schema:
            type: integer
          description: Anomaly ID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                note:
                  type: string
                  description: Optional note about why this is a false positive
      responses:
        '200':
          description: Anomaly marked as false positive successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Anomaly'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Reports API
  /v2/reports/data:
    get:
      tags: [Reports]
      summary: Get report data
      description: Get comprehensive report data (Reports Plan required)
      parameters:
        - in: query
          name: period
          schema:
            type: string
            enum: [7d, 30d, 90d, 1y]
            default: "30d"
          description: Reporting period
        - in: query
          name: include
          schema:
            type: string
            description: Comma-separated list of data to include (domains, devices, services, anomalies)
            example: "domains,devices,anomalies"
      responses:
        '200':
          description: Report data retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          period:
                            type: string
                          domains:
                            type: object
                            properties:
                              total:
                                type: integer
                              up:
                                type: integer
                              down:
                                type: integer
                              average_uptime:
                                type: number
                                format: float
                          devices:
                            type: object
                            properties:
                              total:
                                type: integer
                              online:
                                type: integer
                              offline:
                                type: integer
                              average_uptime:
                                type: number
                                format: float
                          anomalies:
                            type: object
                            properties:
                              total:
                                type: integer
                              resolved:
                                type: integer
                              open:
                                type: integer
                              by_severity:
                                type: object
                                properties:
                                  low:
                                    type: integer
                                  medium:
                                    type: integer
                                  high:
                                    type: integer
                                  critical:
                                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Reports Plan required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                message: "This feature requires a Reports Plan subscription."

  # Public Endpoints
  /check-domain:
    get:
      tags: [Public]
      summary: Check domain availability
      description: Check if a domain is available for monitoring (Public endpoint)
      security: []
      parameters:
        - in: query
          name: domain
          required: true
          schema:
            type: string
          description: Domain name to check
          example: "example.com"
      responses:
        '200':
          description: Domain check completed
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          domain:
                            type: string
                          available:
                            type: boolean
                          reachable:
                            type: boolean
                          response_time:
                            type: number
                            format: float
                            nullable: true

tags:
  - name: Authentication
    description: User authentication and account management
  - name: Domains
    description: Domain monitoring and management (Expert Plan required)
  - name: Devices
    description: Device monitoring and management (Expert Plan required)
  - name: Service Monitors
    description: Service monitoring endpoints (Expert Plan required)
  - name: Toolbox
    description: Network utility tools (Expert Plan required)
  - name: Statistics
    description: Analytics and statistics (Expert Plan required)
  - name: AI & Anomalies
    description: AI-powered anomaly detection and management
  - name: Reports
    description: Comprehensive reporting (Reports Plan required)
  - name: Public
    description: Publicly accessible endpoints